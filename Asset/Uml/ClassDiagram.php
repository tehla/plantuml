<?php

namespace Tehla\PumlBundle\Asset\Uml;

use Tehla\PumlBundle\Asset\{
BuildInterface, WrapperInterface, ConstructTrait, BuildTrait
};

/**
* Generated by AssetMaker
* @see AssetMaker
*/
class ClassDiagram  implements BuildInterface , WrapperInterface
{
use ConstructTrait, BuildTrait;

/** @var array  */
protected $patterns = [
	'type "name" << desc >> {',
	'children',
	'}',
];

/** @var array  */
protected $replaces = [
	'type' => 'type',
	'name' => 'name',
	'desc' => 'desc',
	'children' => '_children_',
];

	protected $name, $desc;

			
		public static function createClass(string $desc = 'class', ?string $name = null): self
		{
		return new static('class', $desc, $name);
		}
		
		public function isClass() :bool
		{
		return $this->type = 'class';
		}
			
		public static function createInterface(string $desc = 'interface', ?string $name = null): self
		{
		return new static('interface', $desc, $name);
		}
		
		public function isInterface() :bool
		{
		return $this->type = 'interface';
		}
			
		public static function createEnum(string $desc = 'enum', ?string $name = null): self
		{
		return new static('enum', $desc, $name);
		}
		
		public function isEnum() :bool
		{
		return $this->type = 'enum';
		}
			
		public static function createAbstract(string $desc = 'abstract', ?string $name = null): self
		{
		return new static('abstract', $desc, $name);
		}
		
		public function isAbstract() :bool
		{
		return $this->type = 'abstract';
		}
	

						
			public function withNameDesc($name, $desc): self
			{
							$this->name = $name;
							$this->desc = $desc;
						return $this;
			}
			

	public function append($child): WrapperInterface
	{
	$this->children->add($child);
	return $this;
	}
}
