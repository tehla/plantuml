<?php

namespace Tehla\PumlBundle\Asset\Archimate;

use Tehla\PumlBundle\Asset\{
BuildInterface, WrapperInterface, ConstructTrait, BuildTrait
};

/**
* Generated by AssetMaker
* @see AssetMaker
*/
class Relationship  implements BuildInterface 
{
use ConstructTrait, BuildTrait;

/** @var array  */
protected $patterns = [
	'Rel_Type(from_name, to_name, "desc")',
];

/** @var array  */
protected $replaces = [
	'Type' => 'type',
	'from_name' => 'from.name',
	'to_name' => 'to.name',
	'desc' => 'desc',
];

	protected $from, $to;

			
		public static function createAccess(string $desc = 'access', ?string $name = null): self
		{
		return new static('access', $desc, $name);
		}
		
		public function isAccess() :bool
		{
		return $this->type = 'access';
		}
			
		public static function createAggregation(string $desc = 'aggregation', ?string $name = null): self
		{
		return new static('aggregation', $desc, $name);
		}
		
		public function isAggregation() :bool
		{
		return $this->type = 'aggregation';
		}
			
		public static function createAssignment(string $desc = 'assignment', ?string $name = null): self
		{
		return new static('assignment', $desc, $name);
		}
		
		public function isAssignment() :bool
		{
		return $this->type = 'assignment';
		}
			
		public static function createAssociation(string $desc = 'association', ?string $name = null): self
		{
		return new static('association', $desc, $name);
		}
		
		public function isAssociation() :bool
		{
		return $this->type = 'association';
		}
			
		public static function createComposition(string $desc = 'composition', ?string $name = null): self
		{
		return new static('composition', $desc, $name);
		}
		
		public function isComposition() :bool
		{
		return $this->type = 'composition';
		}
			
		public static function createFlow(string $desc = 'flow', ?string $name = null): self
		{
		return new static('flow', $desc, $name);
		}
		
		public function isFlow() :bool
		{
		return $this->type = 'flow';
		}
			
		public static function createInfluence(string $desc = 'influence', ?string $name = null): self
		{
		return new static('influence', $desc, $name);
		}
		
		public function isInfluence() :bool
		{
		return $this->type = 'influence';
		}
			
		public static function createRealization(string $desc = 'realization', ?string $name = null): self
		{
		return new static('realization', $desc, $name);
		}
		
		public function isRealization() :bool
		{
		return $this->type = 'realization';
		}
			
		public static function createServing(string $desc = 'serving', ?string $name = null): self
		{
		return new static('serving', $desc, $name);
		}
		
		public function isServing() :bool
		{
		return $this->type = 'serving';
		}
			
		public static function createSpecialization(string $desc = 'specialization', ?string $name = null): self
		{
		return new static('specialization', $desc, $name);
		}
		
		public function isSpecialization() :bool
		{
		return $this->type = 'specialization';
		}
			
		public static function createTriggering(string $desc = 'triggering', ?string $name = null): self
		{
		return new static('triggering', $desc, $name);
		}
		
		public function isTriggering() :bool
		{
		return $this->type = 'triggering';
		}
	

						
			public function withFromTo($from, $to): self
			{
							$this->from = $from;
							$this->to = $to;
						return $this;
			}
			

}
