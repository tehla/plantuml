<?php

namespace Tehla\PumlBundle\Asset\Archimate;

use Tehla\PumlBundle\Asset\{
BuildInterface, WrapperInterface, ConstructTrait, BuildTrait
};

/**
* Generated by AssetMaker
* @see AssetMaker
*/
class ElementBusiness  implements BuildInterface 
{
use ConstructTrait, BuildTrait;

/** @var array  */
protected $patterns = [
	'Business_Type(name, "desc")',
];

/** @var array  */
protected $replaces = [
	'Type' => 'type',
	'name' => 'name',
	'desc' => 'desc',
];


			
		public static function createActivity(string $desc = 'activity', ?string $name = null): self
		{
		return new static('activity', $desc, $name);
		}
		
		public function isActivity() :bool
		{
		return $this->type = 'activity';
		}
			
		public static function createActor(string $desc = 'actor', ?string $name = null): self
		{
		return new static('actor', $desc, $name);
		}
		
		public function isActor() :bool
		{
		return $this->type = 'actor';
		}
			
		public static function createCollaboration(string $desc = 'collaboration', ?string $name = null): self
		{
		return new static('collaboration', $desc, $name);
		}
		
		public function isCollaboration() :bool
		{
		return $this->type = 'collaboration';
		}
			
		public static function createContract(string $desc = 'contract', ?string $name = null): self
		{
		return new static('contract', $desc, $name);
		}
		
		public function isContract() :bool
		{
		return $this->type = 'contract';
		}
			
		public static function createEvent(string $desc = 'event', ?string $name = null): self
		{
		return new static('event', $desc, $name);
		}
		
		public function isEvent() :bool
		{
		return $this->type = 'event';
		}
			
		public static function createFunction(string $desc = 'function', ?string $name = null): self
		{
		return new static('function', $desc, $name);
		}
		
		public function isFunction() :bool
		{
		return $this->type = 'function';
		}
			
		public static function createInteraction(string $desc = 'interaction', ?string $name = null): self
		{
		return new static('interaction', $desc, $name);
		}
		
		public function isInteraction() :bool
		{
		return $this->type = 'interaction';
		}
			
		public static function createInterface(string $desc = 'interface', ?string $name = null): self
		{
		return new static('interface', $desc, $name);
		}
		
		public function isInterface() :bool
		{
		return $this->type = 'interface';
		}
			
		public static function createLocation(string $desc = 'location', ?string $name = null): self
		{
		return new static('location', $desc, $name);
		}
		
		public function isLocation() :bool
		{
		return $this->type = 'location';
		}
			
		public static function createMeaning(string $desc = 'meaning', ?string $name = null): self
		{
		return new static('meaning', $desc, $name);
		}
		
		public function isMeaning() :bool
		{
		return $this->type = 'meaning';
		}
			
		public static function createObject(string $desc = 'object', ?string $name = null): self
		{
		return new static('object', $desc, $name);
		}
		
		public function isObject() :bool
		{
		return $this->type = 'object';
		}
			
		public static function createProcess(string $desc = 'process', ?string $name = null): self
		{
		return new static('process', $desc, $name);
		}
		
		public function isProcess() :bool
		{
		return $this->type = 'process';
		}
			
		public static function createProduct(string $desc = 'product', ?string $name = null): self
		{
		return new static('product', $desc, $name);
		}
		
		public function isProduct() :bool
		{
		return $this->type = 'product';
		}
			
		public static function createRepresentation(string $desc = 'representation', ?string $name = null): self
		{
		return new static('representation', $desc, $name);
		}
		
		public function isRepresentation() :bool
		{
		return $this->type = 'representation';
		}
			
		public static function createRole(string $desc = 'role', ?string $name = null): self
		{
		return new static('role', $desc, $name);
		}
		
		public function isRole() :bool
		{
		return $this->type = 'role';
		}
			
		public static function createService(string $desc = 'service', ?string $name = null): self
		{
		return new static('service', $desc, $name);
		}
		
		public function isService() :bool
		{
		return $this->type = 'service';
		}
			
		public static function createValue(string $desc = 'value', ?string $name = null): self
		{
		return new static('value', $desc, $name);
		}
		
		public function isValue() :bool
		{
		return $this->type = 'value';
		}
	



}
