<?php

namespace Tehla\PumlBundle\Asset\Archimate;

use Tehla\PumlBundle\Asset\{
BuildInterface, WrapperInterface, ConstructTrait, BuildTrait
};

/**
* Generated by AssetMaker
* @see AssetMaker
*/
class ElementApplication  implements BuildInterface 
{
use ConstructTrait, BuildTrait;

/** @var array  */
protected $patterns = [
	'Application_Type(name, "desc")',
];

/** @var array  */
protected $replaces = [
	'Type' => 'type',
	'name' => 'name',
	'desc' => 'desc',
];


			
		public static function createCollaboration(string $desc = 'collaboration', ?string $name = null): self
		{
		return new static('collaboration', $desc, $name);
		}
		
		public function isCollaboration() :bool
		{
		return $this->type = 'collaboration';
		}
			
		public static function createComponent(string $desc = 'component', ?string $name = null): self
		{
		return new static('component', $desc, $name);
		}
		
		public function isComponent() :bool
		{
		return $this->type = 'component';
		}
			
		public static function createDataObject(string $desc = 'data-object', ?string $name = null): self
		{
		return new static('data-object', $desc, $name);
		}
		
		public function isDataObject() :bool
		{
		return $this->type = 'data-object';
		}
			
		public static function createEvent(string $desc = 'event', ?string $name = null): self
		{
		return new static('event', $desc, $name);
		}
		
		public function isEvent() :bool
		{
		return $this->type = 'event';
		}
			
		public static function createFunction(string $desc = 'function', ?string $name = null): self
		{
		return new static('function', $desc, $name);
		}
		
		public function isFunction() :bool
		{
		return $this->type = 'function';
		}
			
		public static function createInteraction(string $desc = 'interaction', ?string $name = null): self
		{
		return new static('interaction', $desc, $name);
		}
		
		public function isInteraction() :bool
		{
		return $this->type = 'interaction';
		}
			
		public static function createInterface(string $desc = 'interface', ?string $name = null): self
		{
		return new static('interface', $desc, $name);
		}
		
		public function isInterface() :bool
		{
		return $this->type = 'interface';
		}
			
		public static function createProcess(string $desc = 'process', ?string $name = null): self
		{
		return new static('process', $desc, $name);
		}
		
		public function isProcess() :bool
		{
		return $this->type = 'process';
		}
			
		public static function createService(string $desc = 'service', ?string $name = null): self
		{
		return new static('service', $desc, $name);
		}
		
		public function isService() :bool
		{
		return $this->type = 'service';
		}
	



}
