{{ '<?php' }}

namespace {{ namespace }};

use Tehla\PumlBundle\Asset\{
BuildInterface, WrapperInterface, ConstructTrait, BuildTrait
};

/**
* Generated by AssetMaker
* @see PumlMaker
*/
class {{ shortname }} {{ extends is defined ? 'extends ' ~ extends : '' }} implements BuildInterface {{ is_wrapper is defined and is_wrapper ? ', WrapperInterface' : ''}}
{
use ConstructTrait, BuildTrait;

/** @var array  */
protected $patterns = [
{% for pattern in render['patterns'] %}
	'{{ pattern | raw }}',
{% endfor %}
];

/** @var array  */
protected $replaces = [
{% for search, replace in render['replaces'] %}
	'{{ search | raw }}' => '{{ replace | raw }}',
{% endfor %}
];

{% if properties is defined and properties is iterable %}
	protected ${{ properties|join(', $') }};
{% endif %}

{% if types is defined and types is iterable %}
	{% for t, type in types %}
		
		public static function create{{ CamelTypes[t] }}(string $desc = '{{ type }}', ?string $name = null): self
		{
		return new static('{{ type }}', $desc, $name);
		}
		
		public function is{{ CamelTypes[t] }}() :bool
		{
		return $this->type = '{{ type }}';
		}
	{% endfor %}
{% endif %}


{% if with is defined and with is iterable %}
	{%  for w, what in with  %}
		{% if what is not iterable %}
			public function with{{ CamelWith[w] }}(${{ camelWith[w] }}): self
			{
			$this->{{ camelWith[w] }} = ${{ camelWith[w] }};
			return $this;
			}
		{% else %}
			
			public function with{{ CamelWith[w] | join }}(${{ camelWith[w] | join(', $') }}): self
			{
			{% for k, v in what %}
				$this->{{ camelWith[w][k] }} = ${{ camelWith[w][k] }};
			{% endfor %}
			return $this;
			}
		{% endif %}
	{% endfor %}
{% endif %}


{% if is_wrapper is defined and is_wrapper %}
	public function append($child): WrapperInterface
	{
	$this->children->add($child);
	return $this;
	}
{% endif %}
}
